import { KeetaNetErrorBase } from './base';
export declare const BlockErrorCodes: readonly ["INVALID_TYPE", "INVALID_VERSION", "NO_MULTIPLE_SET_REP", "IDENTIFIER_NEED_DEFAULT_PERMISSIONS", "CANNOT_SEND_NON_TOKEN", "TOKEN_RECEIVE_DIFFERS", "ONLY_TOKEN_OP", "ONLY_IDENTIFIER_OP", "NO_TOKEN_OP", "NO_IDENTIFIER_OP", "INVALID_SIGNER", "INVALID_PURPOSE_VALIDATION", "INVALID_MULTISIG_QUORUM", "INVALID_MULTISIG_SIGNER_DEPTH", "INVALID_MULTISIG_SIGNER_COUNT", "INVALID_MULTISIG_SIGNER_DUPLICATE", "INVALID_CREATE_IDENTIFIER_ARGS", "NO_MULTISIG_OP", "IDENTIFIER_INVALID", "GENERAL_FIELD_INVALID", "PERMISSIONS_INVALID_DEFAULT", "PERMISSIONS_INVALID_ENTITY", "PERMISSIONS_INVALID_PRINCIPAL", "PERMISSIONS_INVALID_TARGET", "INVALID_ACCOUNT_TYPE", "NO_ADMIN_ON_TARGET", "PREVIOUS_SELF", "NO_DELEGATE_ADMIN", "NO_MODIFY_PERMISSION_DUPE", "CANNOT_FORWARD_TO_SELF", "EXACT_TRUE_WHEN_FORWARDING", "CERTIFICATE_SUBJECT_MISMATCH", "NO_DUPLICATE_CERTIFICATE_OPERATION", "INTERMEDIATE_CERTIFICATES_ONLY_ADD", "INVALID_CERTIFICATE_VALUE", "EXTERNAL_TOO_LONG", "EXTERNAL_INVALID", "EXTERNAL_MISSING", "SUPPLY_INVALID"];
export declare const FullBlockErrorCodes: ("BLOCK_INVALID_TYPE" | "BLOCK_INVALID_VERSION" | "BLOCK_NO_MULTIPLE_SET_REP" | "BLOCK_IDENTIFIER_NEED_DEFAULT_PERMISSIONS" | "BLOCK_CANNOT_SEND_NON_TOKEN" | "BLOCK_TOKEN_RECEIVE_DIFFERS" | "BLOCK_ONLY_TOKEN_OP" | "BLOCK_ONLY_IDENTIFIER_OP" | "BLOCK_NO_TOKEN_OP" | "BLOCK_NO_IDENTIFIER_OP" | "BLOCK_INVALID_SIGNER" | "BLOCK_INVALID_PURPOSE_VALIDATION" | "BLOCK_INVALID_MULTISIG_QUORUM" | "BLOCK_INVALID_MULTISIG_SIGNER_DEPTH" | "BLOCK_INVALID_MULTISIG_SIGNER_COUNT" | "BLOCK_INVALID_MULTISIG_SIGNER_DUPLICATE" | "BLOCK_INVALID_CREATE_IDENTIFIER_ARGS" | "BLOCK_NO_MULTISIG_OP" | "BLOCK_IDENTIFIER_INVALID" | "BLOCK_GENERAL_FIELD_INVALID" | "BLOCK_PERMISSIONS_INVALID_DEFAULT" | "BLOCK_PERMISSIONS_INVALID_ENTITY" | "BLOCK_PERMISSIONS_INVALID_PRINCIPAL" | "BLOCK_PERMISSIONS_INVALID_TARGET" | "BLOCK_INVALID_ACCOUNT_TYPE" | "BLOCK_NO_ADMIN_ON_TARGET" | "BLOCK_PREVIOUS_SELF" | "BLOCK_NO_DELEGATE_ADMIN" | "BLOCK_NO_MODIFY_PERMISSION_DUPE" | "BLOCK_CANNOT_FORWARD_TO_SELF" | "BLOCK_EXACT_TRUE_WHEN_FORWARDING" | "BLOCK_CERTIFICATE_SUBJECT_MISMATCH" | "BLOCK_NO_DUPLICATE_CERTIFICATE_OPERATION" | "BLOCK_INTERMEDIATE_CERTIFICATES_ONLY_ADD" | "BLOCK_INVALID_CERTIFICATE_VALUE" | "BLOCK_EXTERNAL_TOO_LONG" | "BLOCK_EXTERNAL_INVALID" | "BLOCK_EXTERNAL_MISSING" | "BLOCK_SUPPLY_INVALID")[];
export type BlockErrorCode = typeof FullBlockErrorCodes[number];
export default class KeetaNetBlockError extends KeetaNetErrorBase<BlockErrorCode> {
    static readonly isInstance: (obj: any, strict?: boolean) => obj is KeetaNetBlockError;
    constructor(code: BlockErrorCode, message: string);
}
